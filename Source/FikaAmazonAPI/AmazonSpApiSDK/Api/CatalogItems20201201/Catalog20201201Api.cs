/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using FikaAmazonAPI.AmazonSpApiSDK.Clients;
using FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems20201201;

namespace FikaAmazonAPI.AmazonSpApiSDK.Api.CatalogItems20201201
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICatalog20201201Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Item</returns>
        Item GetCatalogItem (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> GetCatalogItemWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ItemSearchResults</returns>
        ItemSearchResults SearchCatalogItems (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of ItemSearchResults</returns>
        ApiResponse<ItemSearchResults> SearchCatalogItemsWithHttpInfo (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> GetCatalogItemAsync (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> GetCatalogItemAsyncWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ItemSearchResults</returns>
        System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (ItemSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemSearchResults>> SearchCatalogItemsAsyncWithHttpInfo (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogApi : ICatalog20201201Api
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogApi(String basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CatalogApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Item</returns>
        public Item GetCatalogItem (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
             ApiResponse<Item> localVarResponse = GetCatalogItemWithHttpInfo(asin, marketplaceIds, includedData, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of Item</returns>
        public ApiResponse< Item > GetCatalogItemWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/2020-12-01/items/{asin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> GetCatalogItemAsync (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
             ApiResponse<Item> localVarResponse = await GetCatalogItemAsyncWithHttpInfo(asin, marketplaceIds, includedData, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves details for an item in the Amazon catalog.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asin">The Amazon Standard Identification Number (ASIN) of the item.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Item>> GetCatalogItemAsyncWithHttpInfo (string asin, List<string> marketplaceIds, List<string> includedData = null, string locale = null)
        {
            // verify the required parameter 'asin' is set
            if (asin == null)
                throw new ApiException(400, "Missing required parameter 'asin' when calling CatalogApi->GetCatalogItem");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->GetCatalogItem");

            var localVarPath = "/catalog/2020-12-01/items/{asin}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asin != null) localVarPathParams.Add("asin", this.Configuration.ApiClient.ParameterToString(asin)); // path parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCatalogItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ItemSearchResults</returns>
        public ItemSearchResults SearchCatalogItems (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null)
        {
             ApiResponse<ItemSearchResults> localVarResponse = SearchCatalogItemsWithHttpInfo(keywords, marketplaceIds, includedData, brandNames, classificationIds, pageSize, pageToken, keywordsLocale, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>ApiResponse of ItemSearchResults</returns>
        public ApiResponse< ItemSearchResults > SearchCatalogItemsWithHttpInfo (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null)
        {
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling CatalogApi->SearchCatalogItems");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->SearchCatalogItems");

            var localVarPath = "/catalog/2020-12-01/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keywords", keywords)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (brandNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "brandNames", brandNames)); // query parameter
            if (classificationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "classificationIds", classificationIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (keywordsLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordsLocale", keywordsLocale)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSearchResults)));
        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ItemSearchResults</returns>
        public async System.Threading.Tasks.Task<ItemSearchResults> SearchCatalogItemsAsync (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null)
        {
             ApiResponse<ItemSearchResults> localVarResponse = await SearchCatalogItemsAsyncWithHttpInfo(keywords, marketplaceIds, includedData, brandNames, classificationIds, pageSize, pageToken, keywordsLocale, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for and return a list of Amazon catalog items and associated information.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | - -- - | - -- - | - -- - | |Default| 5 | 5 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-delimited list of words or item identifiers to search the Amazon catalog for.</param>
        /// <param name="marketplaceIds">A comma-delimited list of Amazon marketplace identifiers for the request.</param>
        /// <param name="includedData">A comma-delimited list of data sets to include in the response. Default: summaries. (optional, default to summaries)</param>
        /// <param name="brandNames">A comma-delimited list of brand names to limit the search to. (optional)</param>
        /// <param name="classificationIds">A comma-delimited list of classification identifiers to limit the search to. (optional)</param>
        /// <param name="pageSize">Number of results to be returned per page. (optional, default to 10)</param>
        /// <param name="pageToken">A token to fetch a certain page when there are multiple pages worth of results. (optional)</param>
        /// <param name="keywordsLocale">The language the keywords are provided in. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <param name="locale">Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace. (optional)</param>
        /// <returns>Task of ApiResponse (ItemSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemSearchResults>> SearchCatalogItemsAsyncWithHttpInfo (List<string> keywords, List<string> marketplaceIds, List<string> includedData = null, List<string> brandNames = null, List<string> classificationIds = null, int? pageSize = null, string pageToken = null, string keywordsLocale = null, string locale = null)
        {
            // verify the required parameter 'keywords' is set
            if (keywords == null)
                throw new ApiException(400, "Missing required parameter 'keywords' when calling CatalogApi->SearchCatalogItems");
            // verify the required parameter 'marketplaceIds' is set
            if (marketplaceIds == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceIds' when calling CatalogApi->SearchCatalogItems");

            var localVarPath = "/catalog/2020-12-01/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keywords != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "keywords", keywords)); // query parameter
            if (marketplaceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "marketplaceIds", marketplaceIds)); // query parameter
            if (includedData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "includedData", includedData)); // query parameter
            if (brandNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "brandNames", brandNames)); // query parameter
            if (classificationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "classificationIds", classificationIds)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (keywordsLocale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keywordsLocale", keywordsLocale)); // query parameter
            if (locale != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locale", locale)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCatalogItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemSearchResults)));
        }

    }
}
