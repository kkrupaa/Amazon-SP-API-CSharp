/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems20201201
{
    /// <summary>
    /// Variation details for the Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public partial class ItemVariationsByMarketplace :  IEquatable<ItemVariationsByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Type of variation relationship of the Amazon catalog item in the request to the related item(s): \&quot;PARENT\&quot; or \&quot;CHILD\&quot;.
        /// </summary>
        /// <value>Type of variation relationship of the Amazon catalog item in the request to the related item(s): \&quot;PARENT\&quot; or \&quot;CHILD\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VariationTypeEnum
        {
            
            /// <summary>
            /// Enum PARENT for value: PARENT
            /// </summary>
            [EnumMember(Value = "PARENT")]
            PARENT = 1,
            
            /// <summary>
            /// Enum CHILD for value: CHILD
            /// </summary>
            [EnumMember(Value = "CHILD")]
            CHILD = 2
        }

        /// <summary>
        /// Type of variation relationship of the Amazon catalog item in the request to the related item(s): \&quot;PARENT\&quot; or \&quot;CHILD\&quot;.
        /// </summary>
        /// <value>Type of variation relationship of the Amazon catalog item in the request to the related item(s): \&quot;PARENT\&quot; or \&quot;CHILD\&quot;.</value>
        [DataMember(Name="variationType", EmitDefaultValue=false)]
        public VariationTypeEnum VariationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariationsByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemVariationsByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemVariationsByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="asins">Identifiers (ASINs) of the related items. (required).</param>
        /// <param name="variationType">Type of variation relationship of the Amazon catalog item in the request to the related item(s): \&quot;PARENT\&quot; or \&quot;CHILD\&quot;. (required).</param>
        public ItemVariationsByMarketplace(string marketplaceId = default(string), List<string> asins = default(List<string>), VariationTypeEnum variationType = default(VariationTypeEnum))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemVariationsByMarketplace and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            // to ensure "asins" is required (not null)
            if (asins == null)
            {
                throw new InvalidDataException("asins is a required property for ItemVariationsByMarketplace and cannot be null");
            }
            else
            {
                this.Asins = asins;
            }
            // to ensure "variationType" is required (not null)
            if (variationType == null)
            {
                throw new InvalidDataException("variationType is a required property for ItemVariationsByMarketplace and cannot be null");
            }
            else
            {
                this.VariationType = variationType;
            }
        }
        
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Identifiers (ASINs) of the related items.
        /// </summary>
        /// <value>Identifiers (ASINs) of the related items.</value>
        [DataMember(Name="asins", EmitDefaultValue=false)]
        public List<string> Asins { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemVariationsByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Asins: ").Append(Asins).Append("\n");
            sb.Append("  VariationType: ").Append(VariationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemVariationsByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemVariationsByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemVariationsByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemVariationsByMarketplace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Asins == input.Asins ||
                    this.Asins != null &&
                    this.Asins.SequenceEqual(input.Asins)
                ) && 
                (
                    this.VariationType == input.VariationType ||
                    (this.VariationType != null &&
                    this.VariationType.Equals(input.VariationType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.Asins != null)
                    hashCode = hashCode * 59 + this.Asins.GetHashCode();
                if (this.VariationType != null)
                    hashCode = hashCode * 59 + this.VariationType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
