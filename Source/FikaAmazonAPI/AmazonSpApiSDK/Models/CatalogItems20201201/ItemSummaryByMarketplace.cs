/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, see the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2020-12-01-use-case-guide).
 *
 * OpenAPI spec version: 2020-12-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.CatalogItems20201201
{
    /// <summary>
    /// Summary details of an Amazon catalog item for the indicated Amazon marketplace.
    /// </summary>
    [DataContract]
    public partial class ItemSummaryByMarketplace :  IEquatable<ItemSummaryByMarketplace>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemSummaryByMarketplace() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemSummaryByMarketplace" /> class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier. (required).</param>
        /// <param name="brandName">Name of the brand associated with an Amazon catalog item..</param>
        /// <param name="browseNode">Identifier of the browse node associated with an Amazon catalog item..</param>
        /// <param name="colorName">Name of the color associated with an Amazon catalog item..</param>
        /// <param name="itemName">Name, or title, associated with an Amazon catalog item..</param>
        /// <param name="manufacturer">Name of the manufacturer associated with an Amazon catalog item..</param>
        /// <param name="modelNumber">Model number associated with an Amazon catalog item..</param>
        /// <param name="sizeName">Name of the size associated with an Amazon catalog item..</param>
        /// <param name="styleName">Name of the style associated with an Amazon catalog item..</param>
        public ItemSummaryByMarketplace(string marketplaceId = default(string), string brandName = default(string), string browseNode = default(string), string colorName = default(string), string itemName = default(string), string manufacturer = default(string), string modelNumber = default(string), string sizeName = default(string), string styleName = default(string))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new InvalidDataException("marketplaceId is a required property for ItemSummaryByMarketplace and cannot be null");
            }
            else
            {
                this.MarketplaceId = marketplaceId;
            }
            this.BrandName = brandName;
            this.BrowseNode = browseNode;
            this.ColorName = colorName;
            this.ItemName = itemName;
            this.Manufacturer = manufacturer;
            this.ModelNumber = modelNumber;
            this.SizeName = sizeName;
            this.StyleName = styleName;
        }
        
        /// <summary>
        /// Amazon marketplace identifier.
        /// </summary>
        /// <value>Amazon marketplace identifier.</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Name of the brand associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the brand associated with an Amazon catalog item.</value>
        [DataMember(Name="brandName", EmitDefaultValue=false)]
        public string BrandName { get; set; }

        /// <summary>
        /// Identifier of the browse node associated with an Amazon catalog item.
        /// </summary>
        /// <value>Identifier of the browse node associated with an Amazon catalog item.</value>
        [DataMember(Name="browseNode", EmitDefaultValue=false)]
        public string BrowseNode { get; set; }

        /// <summary>
        /// Name of the color associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the color associated with an Amazon catalog item.</value>
        [DataMember(Name="colorName", EmitDefaultValue=false)]
        public string ColorName { get; set; }

        /// <summary>
        /// Name, or title, associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name, or title, associated with an Amazon catalog item.</value>
        [DataMember(Name="itemName", EmitDefaultValue=false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Name of the manufacturer associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the manufacturer associated with an Amazon catalog item.</value>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Model number associated with an Amazon catalog item.
        /// </summary>
        /// <value>Model number associated with an Amazon catalog item.</value>
        [DataMember(Name="modelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Name of the size associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the size associated with an Amazon catalog item.</value>
        [DataMember(Name="sizeName", EmitDefaultValue=false)]
        public string SizeName { get; set; }

        /// <summary>
        /// Name of the style associated with an Amazon catalog item.
        /// </summary>
        /// <value>Name of the style associated with an Amazon catalog item.</value>
        [DataMember(Name="styleName", EmitDefaultValue=false)]
        public string StyleName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemSummaryByMarketplace {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  BrowseNode: ").Append(BrowseNode).Append("\n");
            sb.Append("  ColorName: ").Append(ColorName).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  SizeName: ").Append(SizeName).Append("\n");
            sb.Append("  StyleName: ").Append(StyleName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemSummaryByMarketplace);
        }

        /// <summary>
        /// Returns true if ItemSummaryByMarketplace instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemSummaryByMarketplace to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemSummaryByMarketplace input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.BrandName == input.BrandName ||
                    (this.BrandName != null &&
                    this.BrandName.Equals(input.BrandName))
                ) && 
                (
                    this.BrowseNode == input.BrowseNode ||
                    (this.BrowseNode != null &&
                    this.BrowseNode.Equals(input.BrowseNode))
                ) && 
                (
                    this.ColorName == input.ColorName ||
                    (this.ColorName != null &&
                    this.ColorName.Equals(input.ColorName))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.ModelNumber == input.ModelNumber ||
                    (this.ModelNumber != null &&
                    this.ModelNumber.Equals(input.ModelNumber))
                ) && 
                (
                    this.SizeName == input.SizeName ||
                    (this.SizeName != null &&
                    this.SizeName.Equals(input.SizeName))
                ) && 
                (
                    this.StyleName == input.StyleName ||
                    (this.StyleName != null &&
                    this.StyleName.Equals(input.StyleName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                    hashCode = hashCode * 59 + this.MarketplaceId.GetHashCode();
                if (this.BrandName != null)
                    hashCode = hashCode * 59 + this.BrandName.GetHashCode();
                if (this.BrowseNode != null)
                    hashCode = hashCode * 59 + this.BrowseNode.GetHashCode();
                if (this.ColorName != null)
                    hashCode = hashCode * 59 + this.ColorName.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.ModelNumber != null)
                    hashCode = hashCode * 59 + this.ModelNumber.GetHashCode();
                if (this.SizeName != null)
                    hashCode = hashCode * 59 + this.SizeName.GetHashCode();
                if (this.StyleName != null)
                    hashCode = hashCode * 59 + this.StyleName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
