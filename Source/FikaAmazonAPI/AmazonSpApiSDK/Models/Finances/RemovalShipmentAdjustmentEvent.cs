/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
    /// </summary>
    [DataContract]
    public partial class RemovalShipmentAdjustmentEvent : IEquatable<RemovalShipmentAdjustmentEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemovalShipmentAdjustmentEvent" /> class.
        /// </summary>
        /// <param name="postedDate">The date when the financial event was posted..</param>
        /// <param name="adjustmentEventId">The unique identifier for the adjustment event..</param>
        /// <param name="merchantOrderId">The merchant removal orderId..</param>
        /// <param name="orderId">The orderId for shipping inventory..</param>
        /// <param name="transactionType">The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION..</param>
        /// <param name="removalShipmentItemAdjustmentList">A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory..</param>
        public RemovalShipmentAdjustmentEvent(DateTime? postedDate = default(DateTime?), string adjustmentEventId = default(string), string merchantOrderId = default(string), string orderId = default(string), string transactionType = default(string), List<RemovalShipmentItemAdjustment> removalShipmentItemAdjustmentList = default(List<RemovalShipmentItemAdjustment>))
        {
            this.PostedDate = postedDate;
            this.AdjustmentEventId = adjustmentEventId;
            this.MerchantOrderId = merchantOrderId;
            this.OrderId = orderId;
            this.TransactionType = transactionType;
            this.RemovalShipmentItemAdjustmentList = removalShipmentItemAdjustmentList;
        }

        /// <summary>
        /// The date when the financial event was posted.
        /// </summary>
        /// <value>The date when the financial event was posted.</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// The unique identifier for the adjustment event.
        /// </summary>
        /// <value>The unique identifier for the adjustment event.</value>
        [DataMember(Name = "AdjustmentEventId", EmitDefaultValue = false)]
        public string AdjustmentEventId { get; set; }

        /// <summary>
        /// The merchant removal orderId.
        /// </summary>
        /// <value>The merchant removal orderId.</value>
        [DataMember(Name = "MerchantOrderId", EmitDefaultValue = false)]
        public string MerchantOrderId { get; set; }

        /// <summary>
        /// The orderId for shipping inventory.
        /// </summary>
        /// <value>The orderId for shipping inventory.</value>
        [DataMember(Name = "OrderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION.
        /// </summary>
        /// <value>The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION.</value>
        [DataMember(Name = "TransactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.
        /// </summary>
        /// <value>A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory.</value>
        [DataMember(Name = "RemovalShipmentItemAdjustmentList", EmitDefaultValue = false)]
        public List<RemovalShipmentItemAdjustment> RemovalShipmentItemAdjustmentList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemovalShipmentAdjustmentEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  AdjustmentEventId: ").Append(AdjustmentEventId).Append("\n");
            sb.Append("  MerchantOrderId: ").Append(MerchantOrderId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  RemovalShipmentItemAdjustmentList: ").Append(RemovalShipmentItemAdjustmentList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemovalShipmentAdjustmentEvent);
        }

        /// <summary>
        /// Returns true if RemovalShipmentAdjustmentEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of RemovalShipmentAdjustmentEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemovalShipmentAdjustmentEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    this.AdjustmentEventId == input.AdjustmentEventId ||
                    (this.AdjustmentEventId != null &&
                    this.AdjustmentEventId.Equals(input.AdjustmentEventId))
                ) &&
                (
                    this.MerchantOrderId == input.MerchantOrderId ||
                    (this.MerchantOrderId != null &&
                    this.MerchantOrderId.Equals(input.MerchantOrderId))
                ) &&
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) &&
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) &&
                (
                    this.RemovalShipmentItemAdjustmentList == input.RemovalShipmentItemAdjustmentList ||
                    this.RemovalShipmentItemAdjustmentList != null &&
                    this.RemovalShipmentItemAdjustmentList.SequenceEqual(input.RemovalShipmentItemAdjustmentList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostedDate != null)
                    hashCode = hashCode * 59 + this.PostedDate.GetHashCode();
                if (this.AdjustmentEventId != null)
                    hashCode = hashCode * 59 + this.AdjustmentEventId.GetHashCode();
                if (this.MerchantOrderId != null)
                    hashCode = hashCode * 59 + this.MerchantOrderId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.RemovalShipmentItemAdjustmentList != null)
                    hashCode = hashCode * 59 + this.RemovalShipmentItemAdjustmentList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
