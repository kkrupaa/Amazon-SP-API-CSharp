/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// The charge refund transaction.
    /// </summary>
    [DataContract]
    public partial class ChargeRefundTransaction :  IEquatable<ChargeRefundTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRefundTransaction" /> class.
        /// </summary>
        /// <param name="chargeAmount">The amount of the charge refund credit..</param>
        /// <param name="chargeType">The type of charge..</param>
        public ChargeRefundTransaction(Currency chargeAmount = default(Currency), string chargeType = default(string))
        {
            this.ChargeAmount = chargeAmount;
            this.ChargeType = chargeType;
        }
        
        /// <summary>
        /// The amount of the charge refund credit.
        /// </summary>
        /// <value>The amount of the charge refund credit.</value>
        [DataMember(Name="ChargeAmount", EmitDefaultValue=false)]
        public Currency ChargeAmount { get; set; }

        /// <summary>
        /// The type of charge.
        /// </summary>
        /// <value>The type of charge.</value>
        [DataMember(Name="ChargeType", EmitDefaultValue=false)]
        public string ChargeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeRefundTransaction {\n");
            sb.Append("  ChargeAmount: ").Append(ChargeAmount).Append("\n");
            sb.Append("  ChargeType: ").Append(ChargeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeRefundTransaction);
        }

        /// <summary>
        /// Returns true if ChargeRefundTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeRefundTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeRefundTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChargeAmount == input.ChargeAmount ||
                    (this.ChargeAmount != null &&
                    this.ChargeAmount.Equals(input.ChargeAmount))
                ) && 
                (
                    this.ChargeType == input.ChargeType ||
                    (this.ChargeType != null &&
                    this.ChargeType.Equals(input.ChargeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChargeAmount != null)
                    hashCode = hashCode * 59 + this.ChargeAmount.GetHashCode();
                if (this.ChargeType != null)
                    hashCode = hashCode * 59 + this.ChargeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
