/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// An event related to charge refund.
    /// </summary>
    [DataContract]
    public partial class ChargeRefundEvent : IEquatable<ChargeRefundEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeRefundEvent" /> class.
        /// </summary>
        /// <param name="postedDate">The date and time when the financial event was posted..</param>
        /// <param name="reasonCode">The reason given for a charge refund.  Example: &#x60;SubscriptionFeeCorrection&#x60;.</param>
        /// <param name="reasonCodeDescription">A description of the Reason Code.   Example: &#x60;SubscriptionFeeCorrection&#x60;.</param>
        /// <param name="chargeRefundTransactions">The amount of the charge refund credit..</param>
        public ChargeRefundEvent(DateTime? postedDate = default(DateTime?), string reasonCode = default(string), string reasonCodeDescription = default(string), ChargeRefundTransaction chargeRefundTransactions = default(ChargeRefundTransaction))
        {
            this.PostedDate = postedDate;
            this.ReasonCode = reasonCode;
            this.ReasonCodeDescription = reasonCodeDescription;
            this.ChargeRefundTransactions = chargeRefundTransactions;
        }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        /// <value>The date and time when the financial event was posted.</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// The reason given for a charge refund.  Example: &#x60;SubscriptionFeeCorrection&#x60;
        /// </summary>
        /// <value>The reason given for a charge refund.  Example: &#x60;SubscriptionFeeCorrection&#x60;</value>
        [DataMember(Name = "ReasonCode", EmitDefaultValue = false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// A description of the Reason Code.   Example: &#x60;SubscriptionFeeCorrection&#x60;
        /// </summary>
        /// <value>A description of the Reason Code.   Example: &#x60;SubscriptionFeeCorrection&#x60;</value>
        [DataMember(Name = "ReasonCodeDescription", EmitDefaultValue = false)]
        public string ReasonCodeDescription { get; set; }

        /// <summary>
        /// The amount of the charge refund credit.
        /// </summary>
        /// <value>The amount of the charge refund credit.</value>
        [DataMember(Name = "ChargeRefundTransactions", EmitDefaultValue = false)]
        public ChargeRefundTransaction ChargeRefundTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeRefundEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonCodeDescription: ").Append(ReasonCodeDescription).Append("\n");
            sb.Append("  ChargeRefundTransactions: ").Append(ChargeRefundTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeRefundEvent);
        }

        /// <summary>
        /// Returns true if ChargeRefundEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeRefundEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeRefundEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) &&
                (
                    this.ReasonCodeDescription == input.ReasonCodeDescription ||
                    (this.ReasonCodeDescription != null &&
                    this.ReasonCodeDescription.Equals(input.ReasonCodeDescription))
                ) &&
                (
                    this.ChargeRefundTransactions == input.ChargeRefundTransactions ||
                    (this.ChargeRefundTransactions != null &&
                    this.ChargeRefundTransactions.Equals(input.ChargeRefundTransactions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostedDate != null)
                    hashCode = hashCode * 59 + this.PostedDate.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.ReasonCodeDescription != null)
                    hashCode = hashCode * 59 + this.ReasonCodeDescription.GetHashCode();
                if (this.ChargeRefundTransactions != null)
                    hashCode = hashCode * 59 + this.ChargeRefundTransactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
