/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
//using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// Item-level information for a removal shipment item adjustment.
    /// </summary>
    [DataContract]
    public partial class RemovalShipmentItemAdjustment :  IEquatable<RemovalShipmentItemAdjustment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemovalShipmentItemAdjustment" /> class.
        /// </summary>
        /// <param name="removalShipmentItemId">An identifier for an item in a removal shipment..</param>
        /// <param name="taxCollectionModel">The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon..</param>
        /// <param name="fulfillmentNetworkSKU">The Amazon fulfillment network SKU for the item..</param>
        /// <param name="adjustedQuantity">Adjusted quantity of removal shipmentItemAdjustment items..</param>
        /// <param name="revenueAdjustment">The total amount adjusted for disputed items..</param>
        /// <param name="taxAmountAdjustment">Adjustment on the Tax collected amount on the adjusted revenue..</param>
        /// <param name="taxWithheldAdjustment">Adjustment the tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel&#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld&#x3D;0..</param>
        public RemovalShipmentItemAdjustment(string removalShipmentItemId = default(string), string taxCollectionModel = default(string), string fulfillmentNetworkSKU = default(string), int? adjustedQuantity = default(int?), Currency revenueAdjustment = default(Currency), Currency taxAmountAdjustment = default(Currency), Currency taxWithheldAdjustment = default(Currency))
        {
            this.RemovalShipmentItemId = removalShipmentItemId;
            this.TaxCollectionModel = taxCollectionModel;
            this.FulfillmentNetworkSKU = fulfillmentNetworkSKU;
            this.AdjustedQuantity = adjustedQuantity;
            this.RevenueAdjustment = revenueAdjustment;
            this.TaxAmountAdjustment = taxAmountAdjustment;
            this.TaxWithheldAdjustment = taxWithheldAdjustment;
        }
        
        /// <summary>
        /// An identifier for an item in a removal shipment.
        /// </summary>
        /// <value>An identifier for an item in a removal shipment.</value>
        [DataMember(Name="RemovalShipmentItemId", EmitDefaultValue=false)]
        public string RemovalShipmentItemId { get; set; }

        /// <summary>
        /// The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
        /// </summary>
        /// <value>The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.</value>
        [DataMember(Name="TaxCollectionModel", EmitDefaultValue=false)]
        public string TaxCollectionModel { get; set; }

        /// <summary>
        /// The Amazon fulfillment network SKU for the item.
        /// </summary>
        /// <value>The Amazon fulfillment network SKU for the item.</value>
        [DataMember(Name="FulfillmentNetworkSKU", EmitDefaultValue=false)]
        public string FulfillmentNetworkSKU { get; set; }

        /// <summary>
        /// Adjusted quantity of removal shipmentItemAdjustment items.
        /// </summary>
        /// <value>Adjusted quantity of removal shipmentItemAdjustment items.</value>
        [DataMember(Name="AdjustedQuantity", EmitDefaultValue=false)]
        public int? AdjustedQuantity { get; set; }

        /// <summary>
        /// The total amount adjusted for disputed items.
        /// </summary>
        /// <value>The total amount adjusted for disputed items.</value>
        [DataMember(Name="RevenueAdjustment", EmitDefaultValue=false)]
        public Currency RevenueAdjustment { get; set; }

        /// <summary>
        /// Adjustment on the Tax collected amount on the adjusted revenue.
        /// </summary>
        /// <value>Adjustment on the Tax collected amount on the adjusted revenue.</value>
        [DataMember(Name="TaxAmountAdjustment", EmitDefaultValue=false)]
        public Currency TaxAmountAdjustment { get; set; }

        /// <summary>
        /// Adjustment the tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel&#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld&#x3D;0.
        /// </summary>
        /// <value>Adjustment the tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel&#x3D;MarketplaceFacilitator, then TaxWithheld&#x3D;TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld&#x3D;0.</value>
        [DataMember(Name="TaxWithheldAdjustment", EmitDefaultValue=false)]
        public Currency TaxWithheldAdjustment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemovalShipmentItemAdjustment {\n");
            sb.Append("  RemovalShipmentItemId: ").Append(RemovalShipmentItemId).Append("\n");
            sb.Append("  TaxCollectionModel: ").Append(TaxCollectionModel).Append("\n");
            sb.Append("  FulfillmentNetworkSKU: ").Append(FulfillmentNetworkSKU).Append("\n");
            sb.Append("  AdjustedQuantity: ").Append(AdjustedQuantity).Append("\n");
            sb.Append("  RevenueAdjustment: ").Append(RevenueAdjustment).Append("\n");
            sb.Append("  TaxAmountAdjustment: ").Append(TaxAmountAdjustment).Append("\n");
            sb.Append("  TaxWithheldAdjustment: ").Append(TaxWithheldAdjustment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemovalShipmentItemAdjustment);
        }

        /// <summary>
        /// Returns true if RemovalShipmentItemAdjustment instances are equal
        /// </summary>
        /// <param name="input">Instance of RemovalShipmentItemAdjustment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemovalShipmentItemAdjustment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemovalShipmentItemId == input.RemovalShipmentItemId ||
                    (this.RemovalShipmentItemId != null &&
                    this.RemovalShipmentItemId.Equals(input.RemovalShipmentItemId))
                ) && 
                (
                    this.TaxCollectionModel == input.TaxCollectionModel ||
                    (this.TaxCollectionModel != null &&
                    this.TaxCollectionModel.Equals(input.TaxCollectionModel))
                ) && 
                (
                    this.FulfillmentNetworkSKU == input.FulfillmentNetworkSKU ||
                    (this.FulfillmentNetworkSKU != null &&
                    this.FulfillmentNetworkSKU.Equals(input.FulfillmentNetworkSKU))
                ) && 
                (
                    this.AdjustedQuantity == input.AdjustedQuantity ||
                    (this.AdjustedQuantity != null &&
                    this.AdjustedQuantity.Equals(input.AdjustedQuantity))
                ) && 
                (
                    this.RevenueAdjustment == input.RevenueAdjustment ||
                    (this.RevenueAdjustment != null &&
                    this.RevenueAdjustment.Equals(input.RevenueAdjustment))
                ) && 
                (
                    this.TaxAmountAdjustment == input.TaxAmountAdjustment ||
                    (this.TaxAmountAdjustment != null &&
                    this.TaxAmountAdjustment.Equals(input.TaxAmountAdjustment))
                ) && 
                (
                    this.TaxWithheldAdjustment == input.TaxWithheldAdjustment ||
                    (this.TaxWithheldAdjustment != null &&
                    this.TaxWithheldAdjustment.Equals(input.TaxWithheldAdjustment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemovalShipmentItemId != null)
                    hashCode = hashCode * 59 + this.RemovalShipmentItemId.GetHashCode();
                if (this.TaxCollectionModel != null)
                    hashCode = hashCode * 59 + this.TaxCollectionModel.GetHashCode();
                if (this.FulfillmentNetworkSKU != null)
                    hashCode = hashCode * 59 + this.FulfillmentNetworkSKU.GetHashCode();
                if (this.AdjustedQuantity != null)
                    hashCode = hashCode * 59 + this.AdjustedQuantity.GetHashCode();
                if (this.RevenueAdjustment != null)
                    hashCode = hashCode * 59 + this.RevenueAdjustment.GetHashCode();
                if (this.TaxAmountAdjustment != null)
                    hashCode = hashCode * 59 + this.TaxAmountAdjustment.GetHashCode();
                if (this.TaxWithheldAdjustment != null)
                    hashCode = hashCode * 59 + this.TaxWithheldAdjustment.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
