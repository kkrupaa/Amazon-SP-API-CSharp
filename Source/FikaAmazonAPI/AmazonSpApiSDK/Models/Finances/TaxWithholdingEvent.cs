/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Finances
{
    /// <summary>
    /// A TaxWithholding event on seller&#39;s account.
    /// </summary>
    [DataContract]
    public partial class TaxWithholdingEvent : IEquatable<TaxWithholdingEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxWithholdingEvent" /> class.
        /// </summary>
        /// <param name="postedDate">The date and time when the financial event was posted..</param>
        /// <param name="baseAmount">The amount which tax was withheld against..</param>
        /// <param name="withheldAmount">The amount of the tax withholding deducted from seller&#39;s account..</param>
        /// <param name="taxWithholdingPeriod">Time period for which tax is withheld..</param>
        public TaxWithholdingEvent(DateTime? postedDate = default(DateTime?), Currency baseAmount = default(Currency), Currency withheldAmount = default(Currency), TaxWithholdingPeriod taxWithholdingPeriod = default(TaxWithholdingPeriod))
        {
            this.PostedDate = postedDate;
            this.BaseAmount = baseAmount;
            this.WithheldAmount = withheldAmount;
            this.TaxWithholdingPeriod = taxWithholdingPeriod;
        }

        /// <summary>
        /// The date and time when the financial event was posted.
        /// </summary>
        /// <value>The date and time when the financial event was posted.</value>
        [DataMember(Name = "PostedDate", EmitDefaultValue = false)]
        public DateTime? PostedDate { get; set; }

        /// <summary>
        /// The amount which tax was withheld against.
        /// </summary>
        /// <value>The amount which tax was withheld against.</value>
        [DataMember(Name = "BaseAmount", EmitDefaultValue = false)]
        public Currency BaseAmount { get; set; }

        /// <summary>
        /// The amount of the tax withholding deducted from seller&#39;s account.
        /// </summary>
        /// <value>The amount of the tax withholding deducted from seller&#39;s account.</value>
        [DataMember(Name = "WithheldAmount", EmitDefaultValue = false)]
        public Currency WithheldAmount { get; set; }

        /// <summary>
        /// Time period for which tax is withheld.
        /// </summary>
        /// <value>Time period for which tax is withheld.</value>
        [DataMember(Name = "TaxWithholdingPeriod", EmitDefaultValue = false)]
        public TaxWithholdingPeriod TaxWithholdingPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxWithholdingEvent {\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  BaseAmount: ").Append(BaseAmount).Append("\n");
            sb.Append("  WithheldAmount: ").Append(WithheldAmount).Append("\n");
            sb.Append("  TaxWithholdingPeriod: ").Append(TaxWithholdingPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxWithholdingEvent);
        }

        /// <summary>
        /// Returns true if TaxWithholdingEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxWithholdingEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxWithholdingEvent input)
        {
            if (input == null)
                return false;

            return
                (
                    this.PostedDate == input.PostedDate ||
                    (this.PostedDate != null &&
                    this.PostedDate.Equals(input.PostedDate))
                ) &&
                (
                    this.BaseAmount == input.BaseAmount ||
                    (this.BaseAmount != null &&
                    this.BaseAmount.Equals(input.BaseAmount))
                ) &&
                (
                    this.WithheldAmount == input.WithheldAmount ||
                    (this.WithheldAmount != null &&
                    this.WithheldAmount.Equals(input.WithheldAmount))
                ) &&
                (
                    this.TaxWithholdingPeriod == input.TaxWithholdingPeriod ||
                    (this.TaxWithholdingPeriod != null &&
                    this.TaxWithholdingPeriod.Equals(input.TaxWithholdingPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostedDate != null)
                    hashCode = hashCode * 59 + this.PostedDate.GetHashCode();
                if (this.BaseAmount != null)
                    hashCode = hashCode * 59 + this.BaseAmount.GetHashCode();
                if (this.WithheldAmount != null)
                    hashCode = hashCode * 59 + this.WithheldAmount.GetHashCode();
                if (this.TaxWithholdingPeriod != null)
                    hashCode = hashCode * 59 + this.TaxWithholdingPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
